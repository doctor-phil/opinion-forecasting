library(statnet)
data("faux.mesa.high")
A <- as.matrix(faux.mesa.high)
A <- A + diag(1)
diag(1)
vec <- vector('integer',205)
vec[] <- 1
A <- A + diag(vec)
A
C <- A - diag(diag(A))
C
A
reflected_appraisal <- function(A) {
vertices<- length(A[1,])
AT <- t(A)
C <- A - diag(diag(A))
val <- Re(zapsmall(eigen(AT)$values))
vec <- Re(zapsmall(eigen(AT)$vectors))
newvec <- vector('double',vertices)
newvec[] <- 0
for (i in 1:vertices) {
if (val[i]==1) {
temp <- vec[,i]/sum(vec[,i])
newvec <- newvec + temp
}
}
W <- diag(newvec) + (diag(vertices) - diag(newvec))%*%C
return(W)
}
normalize_stochastic <- function(A) {
vertices <- length(A[1,])
for ( i in 1:vertices ) {			#stochasticize the matrix
links <- sum(A[i,])
if (links==0) {
A[i,i]=1			#1s on diagonal if no links
} else {
A[i,] = A[i,] / links		#otherwise, normalize so sum is 1
}
}
return(A)
}
C <- normalize_stochastic(A)
W <- reflected_appraisal(C)
W
sum(W[1,])
sum(W[,1])
